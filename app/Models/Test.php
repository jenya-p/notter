<?php

namespace App\Models;

use Carbon\Carbon;
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\SoftDeletes;

/**
 * @property int $id
 *
 * @property int $user_id
 * @property int $block_id
 * @property int $payment_id
 * @property Carbon $available_till
 * @property float $amount
 * @property int $question_count
 * @property int $right_count
 * @property int $wrong_count
 *
 * @property Carbon $completed_at
 *
 * @property Carbon $created_at
 * @property Carbon $updated_at
 * @property Carbon $deleted_at

 * @property-read int $skipped_count
 *
 * @property-read User $user
 * @property-read Block $block
 * @property-read Answer[] $answers
 *
 * @method static Builder my()
 *
 * @mixin \Eloquent
 */
class Test extends Model {
    use HasFactory, SoftDeletes;

    protected $table = 'tests';

    const STATUS_DONE = 'done';
    const STATUS_ACTIVE = 'active';
    const STATUS_FINISHED = 'finished';

    protected $fillable = [
        'user_id','block_id','payment_id','title','available_till','amount',
        'question_count','right_count','wrong_count', 'completed_at',
        'created_at','updated_at',
    ];

    protected $appends = ['status', 'skipped_count'];

    protected $casts = ['available_till' => 'date', 'completed_at' => 'datetime'];

    protected static function boot() {
        parent::boot(); // TODO: Change the autogenerated stub

        self::creating(function(self $me){
            if(empty($me->question_count)){
                $ticketIds = $me->block->tickets()->pluck('id');
                $me->question_count = Question::whereIn('ticket_id', $ticketIds)->count();
            }
        });
    }

    public function user(){
        return $this->belongsTo(User::class);
    }

    public function block(){
        return $this->belongsTo(Block::class);
    }

    public function answers(){
        return $this->hasMany(Answer::class)->orderBy('ticket_index')->orderBy('question_index');
    }


    public static function scopeMy(Builder $query){
        if(!empty(\Auth::id())){
            return $query->where('user_id', '=', \Auth::id());
        } else{
            return $query->whereRaw('FALSE');
        }
    }

    public function getStatusAttribute(){
        if (!empty($this->completed_at)){
            return self::STATUS_DONE;
        } else if(
            $this->available_till->endOfDay()->lessThanOrEqualTo(now())
        ){
            return self::STATUS_FINISHED;
        } else {
            return self::STATUS_ACTIVE;
        }
    }

    public function getSkippedCountAttribute(){
        return $this->question_count - $this->right_count - $this->wrong_count;
    }

    public function updateCounters(){
        $ticketIds = $this->block->tickets()->pluck('id');
        $this->question_count = Question::whereIn('ticket_id', $ticketIds)->count();
        $this->right_count = $this->answers()->where('is_right', '=', true)->count();
        $this->wrong_count = $this->answers()->where('is_right', '!=', true)->count();
        if($this->question_count == $this->right_count + $this->wrong_count && empty($this->completed_at)){
            $this->completed_at = now();
        }
        $this->save();
    }

    public function isAvailable(){
        return \Auth::id() == $this->user_id && !$this->available_till->endOfDay()->lessThanOrEqualTo(now());
    }

}
